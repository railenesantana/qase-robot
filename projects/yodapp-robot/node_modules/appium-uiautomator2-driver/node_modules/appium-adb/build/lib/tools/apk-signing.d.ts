export default apkSigningMethods;
export type SignedAppCacheValue = {
    output: string;
    expected: KeystoreHash;
    keystorePath: string;
};
export type CertCheckOptions = {
    /**
     * Whether to require that the destination APK
     * is signed with the default Appium certificate or any valid certificate. This option
     * only has effect if `useKeystore` property is unset.
     */
    requireDefaultCert?: boolean | undefined;
};
export type KeystoreHash = {
    /**
     * the md5 hash value of the keystore
     */
    md5?: string | undefined;
    /**
     * the sha1 hash value of the keystore
     */
    sha1?: string | undefined;
    /**
     * the sha256 hash value of the keystore
     */
    sha256?: string | undefined;
    /**
     * the sha512 hash value of the keystore
     */
    sha512?: string | undefined;
};
export type ApkSigningCommands = typeof apkSigningMethods;
declare namespace apkSigningMethods {
    /**
     * Execute apksigner utility with given arguments.
     *
     * @this {import('../adb.js').ADB}
     * @param {string[]} args - The list of tool arguments.
     * @return {Promise<string>} - Command stdout
     * @throws {Error} If apksigner binary is not present on the local file system
     *                 or the return code is not equal to zero.
     */
    function executeApksigner(this: import("../adb.js").ADB, args: string[]): Promise<string>;
    /**
     * (Re)sign the given apk file on the local file system with the default certificate.
     *
     * @this {import('../adb.js').ADB}
     * @param {string} apk - The full path to the local apk file.
     * @throws {Error} If signing fails.
     */
    function signWithDefaultCert(this: import("../adb.js").ADB, apk: string): Promise<void>;
    /**
     * (Re)sign the given apk file on the local file system with a custom certificate.
     *
     * @this {import('../adb.js').ADB}
     * @param {string} apk - The full path to the local apk file.
     * @throws {Error} If signing fails.
     */
    function signWithCustomCert(this: import("../adb.js").ADB, apk: string): Promise<void>;
    /**
     * (Re)sign the given apk file on the local file system with either
     * custom or default certificate based on _this.useKeystore_ property value
     * and Zip-aligns it after signing.
     *
     * @this {import('../adb.js').ADB}
     * @param {string} appPath - The full path to the local .apk(s) file.
     * @throws {Error} If signing fails.
     */
    function sign(this: import("../adb.js").ADB, appPath: string): Promise<void>;
    /**
     * Perform zip-aligning to the given local apk file.
     *
     * @this {import('../adb.js').ADB}
     * @param {string} apk - The full path to the local apk file.
     * @returns {Promise<boolean>} True if the apk has been successfully aligned
     * or false if the apk has been already aligned.
     * @throws {Error} If zip-align fails.
     */
    function zipAlignApk(this: import("../adb.js").ADB, apk: string): Promise<boolean>;
    /**
     * @typedef {Object} CertCheckOptions
     * @property {boolean} [requireDefaultCert=true] Whether to require that the destination APK
     * is signed with the default Appium certificate or any valid certificate. This option
     * only has effect if `useKeystore` property is unset.
     */
    /**
     * Check if the app is already signed with the default Appium certificate.
     *
     * @this {import('../adb.js').ADB}
     * @param {string} appPath - The full path to the local .apk(s) file.
     * @param {string} pkg - The name of application package.
     * @param {CertCheckOptions} [opts={}] - Certificate checking options
     * @return {Promise<boolean>} True if given application is already signed.
     */
    function checkApkCert(this: import("../adb.js").ADB, appPath: string, pkg: string, opts?: CertCheckOptions | undefined): Promise<boolean>;
    /**
     * @typedef {Object} KeystoreHash
     * @property {string} [md5] the md5 hash value of the keystore
     * @property {string} [sha1] the sha1 hash value of the keystore
     * @property {string} [sha256] the sha256 hash value of the keystore
     * @property {string} [sha512] the sha512 hash value of the keystore
     */
    /**
     * Retrieve the the hash of the given keystore.
     *
     * @this {import('../adb.js').ADB}
     * @return {Promise<KeystoreHash>}
     * @throws {Error} If getting keystore hash fails.
     */
    function getKeystoreHash(this: import("../adb.js").ADB): Promise<KeystoreHash>;
}
//# sourceMappingURL=apk-signing.d.ts.map
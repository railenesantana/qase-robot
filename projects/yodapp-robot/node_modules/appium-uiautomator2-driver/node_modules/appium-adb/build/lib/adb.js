"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSdkRootFromEnv = exports.getAndroidBinaryPath = exports.DEFAULT_ADB_PORT = exports.ADB = exports.DEFAULT_OPTS = void 0;
const lodash_1 = __importDefault(require("lodash"));
const node_os_1 = __importDefault(require("node:os"));
const tools_1 = __importStar(require("./tools"));
Object.defineProperty(exports, "getAndroidBinaryPath", { enumerable: true, get: function () { return tools_1.getAndroidBinaryPath; } });
const helpers_1 = require("./helpers");
Object.defineProperty(exports, "getSdkRootFromEnv", { enumerable: true, get: function () { return helpers_1.getSdkRootFromEnv; } });
const logger_1 = __importDefault(require("./logger"));
const DEFAULT_ADB_PORT = 5037;
exports.DEFAULT_ADB_PORT = DEFAULT_ADB_PORT;
exports.DEFAULT_OPTS = {
    sdkRoot: (0, helpers_1.getSdkRootFromEnv)(),
    executable: { path: 'adb', defaultArgs: [] },
    tmpDir: node_os_1.default.tmpdir(),
    binaries: {},
    adbPort: DEFAULT_ADB_PORT,
    adbExecTimeout: helpers_1.DEFAULT_ADB_EXEC_TIMEOUT,
    remoteAppsCacheLimit: 10,
    allowOfflineDevices: false,
    allowDelayAdb: true,
};
class ADB {
    constructor(opts = {}) {
        const options = lodash_1.default.defaultsDeep(opts, lodash_1.default.cloneDeep(exports.DEFAULT_OPTS));
        lodash_1.default.defaultsDeep(this, options);
        // The above defaultsDeep call guarantees the 'executable' field to be always assigned
        this.executable = options.executable;
        if (options.remoteAdbHost) {
            this.executable.defaultArgs.push('-H', options.remoteAdbHost);
            this.adbHost = options.remoteAdbHost;
        }
        // TODO figure out why we have this option as it does not appear to be
        // used anywhere. Probably deprecate in favor of simple opts.adbPort
        if (options.remoteAdbPort) {
            this.adbPort = options.remoteAdbPort;
        }
        this.executable.defaultArgs.push('-P', String(this.adbPort));
        if (options.udid) {
            this.setDeviceId(options.udid);
        }
    }
    /**
     * Create a new instance of `ADB` that inherits configuration from this `ADB` instance.
     * This avoids the need to call `ADB.createADB()` multiple times.
     * @param opts - Additional options mapping to pass to the `ADB` constructor.
     * @returns The resulting class instance.
     */
    clone(opts = {}) {
        const originalOptions = lodash_1.default.cloneDeep(lodash_1.default.pick(this, Object.keys(exports.DEFAULT_OPTS)));
        const cloneOptions = lodash_1.default.defaultsDeep(opts, originalOptions);
        // Reset default arguments created in the constructor.
        // Without this code, -H and -P can be injected into defaultArgs multiple times.
        const defaultArgs = cloneOptions.executable.defaultArgs;
        if (cloneOptions.remoteAdbHost && defaultArgs.includes('-H')) {
            defaultArgs.splice(defaultArgs.indexOf('-H'), 2);
        }
        if (defaultArgs.includes('-P')) {
            defaultArgs.splice(defaultArgs.indexOf('-P'), 2);
        }
        return new ADB(cloneOptions);
    }
    static async createADB(opts = {}) {
        const adb = new ADB(opts);
        adb.sdkRoot = await (0, helpers_1.requireSdkRoot)(adb.sdkRoot);
        await adb.getAdbWithCorrectAdbPath();
        if (!opts?.suppressKillServer) {
            try {
                await adb.adbExec(['start-server']);
            }
            catch (e) {
                const err = e;
                logger_1.default.warn(err.stderr || err.message);
            }
        }
        return adb;
    }
}
exports.ADB = ADB;
// add all the methods to the ADB prototype
Object.assign(ADB.prototype, tools_1.default);
//# sourceMappingURL=adb.js.map
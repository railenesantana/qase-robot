/**
 * @this {import('../driver').AndroidDriver}
 * @param {import('@appium/types').Location} location
 * @returns {Promise<import('@appium/types').Location>}
 */
export function setGeoLocation(this: import("../driver").AndroidDriver, location: import("@appium/types").Location): Promise<import("@appium/types").Location>;
/**
 * Sends an async request to refresh the GPS cache.
 *
 * This feature only works if the device under test has Google Play Services
 * installed. In case the vanilla LocationManager is used the device API level
 * must be at version 30 (Android R) or higher.
 *
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').GpsCacheRefreshOpts} [opts={}]
 * @returns {Promise<void>}
 */
export function mobileRefreshGpsCache(this: import("../driver").AndroidDriver, opts?: import("./types").GpsCacheRefreshOpts | undefined): Promise<void>;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<import('@appium/types').Location>}
 */
export function getGeoLocation(this: import("../driver").AndroidDriver): Promise<import("@appium/types").Location>;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<boolean>}
 */
export function isLocationServicesEnabled(this: import("../driver").AndroidDriver): Promise<boolean>;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
export function toggleLocationServices(this: import("../driver").AndroidDriver): Promise<void>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {string} appId
 * @returns {Promise<void>}
 */
export function setMockLocationApp(this: import("../driver").AndroidDriver, appId: string): Promise<void>;
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
export function resetMockLocation(this: import("../driver").AndroidDriver): Promise<void>;
//# sourceMappingURL=geolocation.d.ts.map
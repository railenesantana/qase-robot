/**
 *
 * @param {import('../types').UnlockType} unlockType
 * @returns {string}
 */
export function toCredentialType(unlockType: import("../types").UnlockType): string;
/**
 * @template {AndroidDriverCaps} T
 * @param {T} caps
 * @returns {T}
 */
export function validateUnlockCapabilities<T extends AndroidDriverCaps>(caps: T): T;
/**
 * @this {AndroidDriver}
 * @param {import('../types').FastUnlockOptions} opts
 */
export function fastUnlock(this: import("../../driver").AndroidDriver, opts: import("../types").FastUnlockOptions): Promise<void>;
/**
 *
 * @param {string} key
 * @returns {string}
 */
export function encodePassword(key: string): string;
/**
 *
 * @param {string} key
 * @returns {string[]}
 */
export function stringKeyToArr(key: string): string[];
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function fingerprintUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function pinUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function pinUnlockWithKeyEvent(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 * @returns {Promise<void>}
 */
export function passwordUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
/**
 *
 * @param {number} key
 * @param {import('@appium/types').Position} initPos
 * @param {number} piece
 * @returns {import('@appium/types').Position}
 */
export function getPatternKeyPosition(key: number, initPos: import("@appium/types").Position, piece: number): import("@appium/types").Position;
/**
 * @param {string[]|number[]} keys
 * @param {import('@appium/types').Position} initPos
 * @param {number} piece
 * @returns {import('@appium/types').StringRecord[]}
 */
export function getPatternActions(keys: string[] | number[], initPos: import("@appium/types").Position, piece: number): import("@appium/types").StringRecord[];
/**
 * @this {AndroidDriver}
 * @param {number?} [timeoutMs=null]
 */
export function verifyUnlock(this: import("../../driver").AndroidDriver, timeoutMs?: number | null | undefined): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {AndroidDriverCaps} capabilities
 */
export function patternUnlock(this: import("../../driver").AndroidDriver, capabilities: AndroidDriverCaps): Promise<void>;
export const PIN_UNLOCK: "pin";
export const PIN_UNLOCK_KEY_EVENT: "pinWithKeyEvent";
export const PASSWORD_UNLOCK: "password";
export const PATTERN_UNLOCK: "pattern";
export const FINGERPRINT_UNLOCK: "fingerprint";
export const KEYCODE_NUMPAD_ENTER: 66;
export const UNLOCK_WAIT_TIME: 100;
export const INPUT_KEYS_WAIT_TIME: 100;
export type AndroidDriverCaps = import("@appium/types").Capabilities<import("../../constraints").AndroidDriverConstraints>;
export type AndroidDriver = import("../../driver").AndroidDriver;
//# sourceMappingURL=helpers.d.ts.map
import type { DriverCaps, DriverOpts, ExternalDriver, InitialOpts, RouteMatcher, StringRecord, W3CDriverCaps } from '@appium/types';
import ADB from 'appium-adb';
import type { LogcatListener } from 'appium-adb';
import type { default as AppiumChromedriver } from 'appium-chromedriver';
import { BaseDriver } from 'appium/driver';
import { AndroidDriverConstraints } from './constraints';
import { SettingsApp } from 'io.appium.settings';
import { getContexts, getCurrentContext, defaultContextName, assignContexts, switchContext, defaultWebviewName, isWebContext, isChromedriverContext, startChromedriverProxy, onChromedriverStop, stopChromedriverProxies, suspendChromedriverProxy, startChromeSession, mobileGetContexts } from './commands/context/exports';
import { getDeviceInfoFromCaps, createADB, getLaunchInfo, initDevice } from './commands/device/common';
import { fingerprint, mobileFingerprint, sendSMS, mobileSendSms, gsmCall, mobileGsmCall, gsmSignal, mobileGsmSignal, gsmVoice, mobileGsmVoice, powerAC, mobilePowerAc, powerCapacity, mobilePowerCapacity, networkSpeed, mobileNetworkSpeed, sensorSet } from './commands/device/emulator-actions';
import { mobileExecEmuConsoleCommand } from './commands/device/emulator-console';
import { getThirdPartyPackages, uninstallOtherPackages, installOtherApks, installAUT, resetAUT, background, getCurrentActivity, getCurrentPackage, mobileClearApp, mobileInstallApp, installApp, mobileActivateApp, mobileIsAppInstalled, mobileQueryAppState, mobileRemoveApp, mobileTerminateApp, terminateApp, removeApp, activateApp, queryAppState, isAppInstalled } from './commands/app-management';
import { mobileGetUiMode, mobileSetUiMode } from './commands/appearance';
import { mobileDeviceidle } from './commands/deviceidle';
import { mobileBluetooth } from './commands/bluetooth';
import { getAttribute, getName, elementDisplayed, elementEnabled, elementSelected, setElementValue, doSetElementValue, replaceValue, setValueImmediate, setValue, click, getLocationInView, getText, getLocation, getSize } from './commands/element';
import { execute, executeMobile, mobileCommandsMapping } from './commands/execute';
import { pullFile, mobilePullFile, pullFolder, mobilePullFolder, pushFile, mobilePushFile, mobileDeleteFile } from './commands/file-actions';
import { findElOrEls, doFindElementOrEls } from './commands/find';
import { setGeoLocation, getGeoLocation, mobileRefreshGpsCache, toggleLocationServices, isLocationServicesEnabled } from './commands/geolocation';
import { performActions } from './commands/gestures';
import { isIMEActivated, availableIMEEngines, getActiveIMEEngine, activateIMEEngine, deactivateIMEEngine } from './commands/ime';
import { mobileStartActivity, mobileBroadcast, mobileStartService, mobileStopService } from './commands/intent';
import { hideKeyboard, isKeyboardShown, keys, doSendKeys, pressKeyCode, longPressKeyCode, mobilePerformEditorAction } from './commands/keyboard';
import { lock, unlock, mobileLock, mobileUnlock, isLocked } from './commands/lock/exports';
import { mobileStartLogsBroadcast, mobileStopLogsBroadcast, getLogTypes, getLog } from './commands/log';
import { mobileIsMediaProjectionRecordingRunning, mobileStartMediaProjectionRecording, mobileStopMediaProjectionRecording } from './commands/media-projection';
import { mobileSendTrimMemory } from './commands/memory';
import { mobileNfc } from './commands/nfc';
import { mobileInjectEmulatorCameraImage } from './commands/image-injection';
import { getWindowRect, getWindowSize, getDisplayDensity, mobileGetNotifications, mobileListSms, openNotifications, setUrl } from './commands/misc';
import { getNetworkConnection, isWifiOn, mobileGetConnectivity, mobileSetConnectivity, setNetworkConnection, setWifiState, setDataState, toggleData, toggleFlightMode, toggleWiFi } from './commands/network';
import { getPerformanceData, getPerformanceDataTypes, mobileGetPerformanceData } from './commands/performance';
import { reset, closeApp, launchApp } from './commands/legacy';
import { mobileChangePermissions, mobileGetPermissions } from './commands/permissions';
import { startRecordingScreen, stopRecordingScreen } from './commands/recordscreen';
import { getStrings, ensureDeviceLocale } from './commands/resources';
import { mobileShell } from './commands/shell';
import { mobileStartScreenStreaming, mobileStopScreenStreaming } from './commands/streamscreen';
import { getSystemBars, mobilePerformStatusBarCommand } from './commands/system-bars';
import { getDeviceTime, mobileGetDeviceTime } from './commands/time';
export type AndroidDriverCaps = DriverCaps<AndroidDriverConstraints>;
export type W3CAndroidDriverCaps = W3CDriverCaps<AndroidDriverConstraints>;
export type AndroidDriverOpts = DriverOpts<AndroidDriverConstraints>;
type AndroidExternalDriver = ExternalDriver<AndroidDriverConstraints>;
declare class AndroidDriver extends BaseDriver<AndroidDriverConstraints, StringRecord> implements ExternalDriver<AndroidDriverConstraints, string, StringRecord> {
    static newMethodMap: {
        readonly '/session/:sessionId/timeouts/implicit_wait': {
            readonly POST: {
                readonly command: "implicitWait";
                readonly payloadParams: {
                    readonly required: readonly ["ms"];
                };
            };
        };
        readonly '/session/:sessionId/ime/available_engines': {
            readonly GET: {
                readonly command: "availableIMEEngines";
            };
        };
        readonly '/session/:sessionId/ime/active_engine': {
            readonly GET: {
                readonly command: "getActiveIMEEngine";
            };
        };
        readonly '/session/:sessionId/ime/activated': {
            readonly GET: {
                readonly command: "isIMEActivated";
            };
        };
        readonly '/session/:sessionId/ime/deactivate': {
            readonly POST: {
                readonly command: "deactivateIMEEngine";
            };
        };
        readonly '/session/:sessionId/ime/activate': {
            readonly POST: {
                readonly command: "activateIMEEngine";
                readonly payloadParams: {
                    readonly required: readonly ["engine"];
                };
            };
        };
        readonly '/session/:sessionId/window/:windowhandle/size': {
            readonly GET: {
                readonly command: "getWindowSize";
            };
        };
        readonly '/session/:sessionId/keys': {
            readonly POST: {
                readonly command: "keys";
                readonly payloadParams: {
                    readonly required: readonly ["value"];
                };
            };
        };
        readonly '/session/:sessionId/element/:elementId/location': {
            readonly GET: {
                readonly command: "getLocation";
            };
        };
        readonly '/session/:sessionId/element/:elementId/location_in_view': {
            readonly GET: {
                readonly command: "getLocationInView";
            };
        };
        readonly '/session/:sessionId/element/:elementId/size': {
            readonly GET: {
                readonly command: "getSize";
            };
        };
        readonly '/session/:sessionId/appium/device/lock': {
            readonly POST: {
                readonly command: "lock";
                readonly payloadParams: {
                    readonly optional: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/unlock': {
            readonly POST: {
                readonly command: "unlock";
            };
        };
        readonly '/session/:sessionId/appium/device/is_locked': {
            readonly POST: {
                readonly command: "isLocked";
            };
        };
        readonly '/session/:sessionId/appium/start_recording_screen': {
            readonly POST: {
                readonly command: "startRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/stop_recording_screen': {
            readonly POST: {
                readonly command: "stopRecordingScreen";
                readonly payloadParams: {
                    readonly optional: readonly ["options"];
                };
            };
        };
        readonly '/session/:sessionId/appium/performanceData/types': {
            readonly POST: {
                readonly command: "getPerformanceDataTypes";
            };
        };
        readonly '/session/:sessionId/appium/getPerformanceData': {
            readonly POST: {
                readonly command: "getPerformanceData";
                readonly payloadParams: {
                    readonly required: readonly ["packageName", "dataType"];
                    readonly optional: readonly ["dataReadTimeout"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/press_keycode': {
            readonly POST: {
                readonly command: "pressKeyCode";
                readonly payloadParams: {
                    readonly required: readonly ["keycode"];
                    readonly optional: readonly ["metastate", "flags"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/long_press_keycode': {
            readonly POST: {
                readonly command: "longPressKeyCode";
                readonly payloadParams: {
                    readonly required: readonly ["keycode"];
                    readonly optional: readonly ["metastate", "flags"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/finger_print': {
            readonly POST: {
                readonly command: "fingerprint";
                readonly payloadParams: {
                    readonly required: readonly ["fingerprintId"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/send_sms': {
            readonly POST: {
                readonly command: "sendSMS";
                readonly payloadParams: {
                    readonly required: readonly ["phoneNumber", "message"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/gsm_call': {
            readonly POST: {
                readonly command: "gsmCall";
                readonly payloadParams: {
                    readonly required: readonly ["phoneNumber", "action"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/gsm_signal': {
            readonly POST: {
                readonly command: "gsmSignal";
                readonly payloadParams: {
                    readonly required: readonly ["signalStrength"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/gsm_voice': {
            readonly POST: {
                readonly command: "gsmVoice";
                readonly payloadParams: {
                    readonly required: readonly ["state"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/power_capacity': {
            readonly POST: {
                readonly command: "powerCapacity";
                readonly payloadParams: {
                    readonly required: readonly ["percent"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/power_ac': {
            readonly POST: {
                readonly command: "powerAC";
                readonly payloadParams: {
                    readonly required: readonly ["state"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/network_speed': {
            readonly POST: {
                readonly command: "networkSpeed";
                readonly payloadParams: {
                    readonly required: readonly ["netspeed"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/keyevent': {
            readonly POST: {
                readonly command: "keyevent";
                readonly payloadParams: {
                    readonly required: readonly ["keycode"];
                    readonly optional: readonly ["metastate"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/current_activity': {
            readonly GET: {
                readonly command: "getCurrentActivity";
            };
        };
        readonly '/session/:sessionId/appium/device/current_package': {
            readonly GET: {
                readonly command: "getCurrentPackage";
            };
        };
        readonly '/session/:sessionId/appium/device/app_state': {
            readonly POST: {
                readonly command: "queryAppState";
                readonly payloadParams: {
                    readonly required: readonly [readonly ["appId"], readonly ["bundleId"]];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_airplane_mode': {
            readonly POST: {
                readonly command: "toggleFlightMode";
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_data': {
            readonly POST: {
                readonly command: "toggleData";
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_wifi': {
            readonly POST: {
                readonly command: "toggleWiFi";
            };
        };
        readonly '/session/:sessionId/appium/device/toggle_location_services': {
            readonly POST: {
                readonly command: "toggleLocationServices";
            };
        };
        readonly '/session/:sessionId/appium/device/open_notifications': {
            readonly POST: {
                readonly command: "openNotifications";
            };
        };
        readonly '/session/:sessionId/appium/device/start_activity': {
            readonly POST: {
                readonly command: "startActivity";
                readonly payloadParams: {
                    readonly required: readonly ["appPackage", "appActivity"];
                    readonly optional: readonly ["appWaitPackage", "appWaitActivity", "intentAction", "intentCategory", "intentFlags", "optionalIntentArguments", "dontStopAppOnReset"];
                };
            };
        };
        readonly '/session/:sessionId/appium/device/system_bars': {
            readonly GET: {
                readonly command: "getSystemBars";
            };
        };
        readonly '/session/:sessionId/appium/device/display_density': {
            readonly GET: {
                readonly command: "getDisplayDensity";
            };
        };
        readonly '/session/:sessionId/appium/app/background': {
            readonly POST: {
                readonly command: "background";
                readonly payloadParams: {
                    readonly required: readonly ["seconds"];
                };
            };
        };
        readonly '/session/:sessionId/appium/app/strings': {
            readonly POST: {
                readonly command: "getStrings";
                readonly payloadParams: {
                    readonly optional: readonly ["language", "stringFile"];
                };
            };
        };
        readonly '/session/:sessionId/appium/element/:elementId/value': {
            readonly POST: {
                readonly command: "setValueImmediate";
                readonly payloadParams: {
                    readonly required: readonly ["text"];
                };
            };
        };
        readonly '/session/:sessionId/appium/element/:elementId/replace_value': {
            readonly POST: {
                readonly command: "replaceValue";
                readonly payloadParams: {
                    readonly required: readonly ["text"];
                };
            };
        };
    };
    jwpProxyAvoid: RouteMatcher[];
    adb: ADB;
    _settingsApp: SettingsApp;
    proxyReqRes?: (...args: any) => any;
    contexts?: string[];
    sessionChromedrivers: StringRecord<AppiumChromedriver>;
    chromedriver?: AppiumChromedriver;
    proxyCommand?: AndroidExternalDriver['proxyCommand'];
    jwpProxyActive: boolean;
    curContext: string;
    useUnlockHelperApp?: boolean;
    defaultIME?: string;
    _wasWindowAnimationDisabled?: boolean;
    _cachedActivityArgs: StringRecord;
    _screenStreamingProps?: StringRecord;
    _screenRecordingProperties?: StringRecord;
    _logcatWebsocketListener?: LogcatListener;
    opts: AndroidDriverOpts;
    constructor(opts?: InitialOpts, shouldValidateCaps?: boolean);
    get settingsApp(): SettingsApp;
    isEmulator(): boolean;
    get isChromeSession(): boolean;
    validateDesiredCaps(caps: any): caps is AndroidDriverCaps;
    deleteSession(sessionId?: string | null): Promise<void>;
    getContexts: typeof getContexts;
    getCurrentContext: typeof getCurrentContext;
    defaultContextName: typeof defaultContextName;
    assignContexts: typeof assignContexts;
    switchContext: typeof switchContext;
    defaultWebviewName: typeof defaultWebviewName;
    isChromedriverContext: typeof isChromedriverContext;
    startChromedriverProxy: typeof startChromedriverProxy;
    stopChromedriverProxies: typeof stopChromedriverProxies;
    suspendChromedriverProxy: typeof suspendChromedriverProxy;
    startChromeSession: typeof startChromeSession;
    onChromedriverStop: typeof onChromedriverStop;
    isWebContext: typeof isWebContext;
    mobileGetContexts: typeof mobileGetContexts;
    setContext: (this: AndroidDriver, name?: string) => Promise<void>;
    getDeviceInfoFromCaps: typeof getDeviceInfoFromCaps;
    createADB: typeof createADB;
    getLaunchInfo: typeof getLaunchInfo;
    initDevice: typeof initDevice;
    fingerprint: typeof fingerprint;
    mobileFingerprint: typeof mobileFingerprint;
    sendSMS: typeof sendSMS;
    mobileSendSms: typeof mobileSendSms;
    gsmCall: typeof gsmCall;
    mobileGsmCall: typeof mobileGsmCall;
    gsmSignal: typeof gsmSignal;
    mobileGsmSignal: typeof mobileGsmSignal;
    gsmVoice: typeof gsmVoice;
    mobileGsmVoice: typeof mobileGsmVoice;
    powerAC: typeof powerAC;
    mobilePowerAc: typeof mobilePowerAc;
    powerCapacity: typeof powerCapacity;
    mobilePowerCapacity: typeof mobilePowerCapacity;
    networkSpeed: typeof networkSpeed;
    mobileNetworkSpeed: typeof mobileNetworkSpeed;
    sensorSet: typeof sensorSet;
    mobileExecEmuConsoleCommand: typeof mobileExecEmuConsoleCommand;
    getThirdPartyPackages: typeof getThirdPartyPackages;
    uninstallOtherPackages: typeof uninstallOtherPackages;
    installOtherApks: typeof installOtherApks;
    installAUT: typeof installAUT;
    resetAUT: typeof resetAUT;
    background: typeof background;
    getCurrentActivity: typeof getCurrentActivity;
    getCurrentPackage: typeof getCurrentPackage;
    mobileClearApp: typeof mobileClearApp;
    mobileInstallApp: typeof mobileInstallApp;
    installApp: typeof installApp;
    mobileActivateApp: typeof mobileActivateApp;
    mobileIsAppInstalled: typeof mobileIsAppInstalled;
    mobileQueryAppState: typeof mobileQueryAppState;
    mobileRemoveApp: typeof mobileRemoveApp;
    mobileTerminateApp: typeof mobileTerminateApp;
    terminateApp: typeof terminateApp;
    removeApp: typeof removeApp;
    activateApp: typeof activateApp;
    queryAppState: typeof queryAppState;
    isAppInstalled: typeof isAppInstalled;
    mobileGetUiMode: typeof mobileGetUiMode;
    mobileSetUiMode: typeof mobileSetUiMode;
    mobileDeviceidle: typeof mobileDeviceidle;
    mobileBluetooth: typeof mobileBluetooth;
    getAttribute: typeof getAttribute;
    getName: typeof getName;
    elementDisplayed: typeof elementDisplayed;
    elementEnabled: typeof elementEnabled;
    elementSelected: typeof elementSelected;
    setElementValue: typeof setElementValue;
    doSetElementValue: typeof doSetElementValue;
    replaceValue: typeof replaceValue;
    setValueImmediate: typeof setValueImmediate;
    setValue: typeof setValue;
    click: typeof click;
    getLocationInView: typeof getLocationInView;
    getText: typeof getText;
    getLocation: typeof getLocation;
    getSize: typeof getSize;
    execute: typeof execute;
    executeMobile: typeof executeMobile;
    mobileCommandsMapping: typeof mobileCommandsMapping;
    pullFile: typeof pullFile;
    mobilePullFile: typeof mobilePullFile;
    pullFolder: typeof pullFolder;
    mobilePullFolder: typeof mobilePullFolder;
    pushFile: typeof pushFile;
    mobilePushFile: typeof mobilePushFile;
    mobileDeleteFile: typeof mobileDeleteFile;
    findElOrEls: typeof findElOrEls;
    doFindElementOrEls: typeof doFindElementOrEls;
    setGeoLocation: typeof setGeoLocation;
    getGeoLocation: typeof getGeoLocation;
    mobileRefreshGpsCache: typeof mobileRefreshGpsCache;
    toggleLocationServices: typeof toggleLocationServices;
    isLocationServicesEnabled: typeof isLocationServicesEnabled;
    performActions: typeof performActions;
    isIMEActivated: typeof isIMEActivated;
    availableIMEEngines: typeof availableIMEEngines;
    getActiveIMEEngine: typeof getActiveIMEEngine;
    activateIMEEngine: typeof activateIMEEngine;
    deactivateIMEEngine: typeof deactivateIMEEngine;
    startActivity: (appPackage: string, appActivity: string, appWaitPackage?: string, appWaitActivity?: string, intentAction?: string, intentCategory?: string, intentFlags?: string, optionalIntentArguments?: string, dontStopAppOnReset?: boolean) => Promise<void>;
    mobileStartActivity: typeof mobileStartActivity;
    mobileBroadcast: typeof mobileBroadcast;
    mobileStartService: typeof mobileStartService;
    mobileStopService: typeof mobileStopService;
    hideKeyboard: typeof hideKeyboard;
    isKeyboardShown: typeof isKeyboardShown;
    keys: typeof keys;
    doSendKeys: typeof doSendKeys;
    pressKeyCode: typeof pressKeyCode;
    longPressKeyCode: typeof longPressKeyCode;
    mobilePerformEditorAction: typeof mobilePerformEditorAction;
    lock: typeof lock;
    unlock: typeof unlock;
    mobileLock: typeof mobileLock;
    mobileUnlock: typeof mobileUnlock;
    isLocked: typeof isLocked;
    supportedLogTypes: {
        logcat: {
            description: string;
            getter: (self: import("./driver").AndroidDriver) => string[];
        };
        bugreport: {
            description: string;
            getter: (self: import("./driver").AndroidDriver) => Promise<{
                timestamp: number;
                level: string;
                message: string;
            }[]>;
        };
        server: {
            description: string;
            getter: (self: import("./driver").AndroidDriver) => {
                timestamp: number;
                level: string;
                message: string;
            }[];
        };
    };
    mobileStartLogsBroadcast: typeof mobileStartLogsBroadcast;
    mobileStopLogsBroadcast: typeof mobileStopLogsBroadcast;
    getLogTypes: typeof getLogTypes;
    getLog: typeof getLog;
    mobileIsMediaProjectionRecordingRunning: typeof mobileIsMediaProjectionRecordingRunning;
    mobileStartMediaProjectionRecording: typeof mobileStartMediaProjectionRecording;
    mobileStopMediaProjectionRecording: typeof mobileStopMediaProjectionRecording;
    mobileSendTrimMemory: typeof mobileSendTrimMemory;
    mobileInjectEmulatorCameraImage: typeof mobileInjectEmulatorCameraImage;
    getWindowRect: typeof getWindowRect;
    getWindowSize: typeof getWindowSize;
    getDisplayDensity: typeof getDisplayDensity;
    mobileGetNotifications: typeof mobileGetNotifications;
    mobileListSms: typeof mobileListSms;
    openNotifications: typeof openNotifications;
    setUrl: typeof setUrl;
    getNetworkConnection: typeof getNetworkConnection;
    isWifiOn: typeof isWifiOn;
    mobileGetConnectivity: typeof mobileGetConnectivity;
    mobileSetConnectivity: typeof mobileSetConnectivity;
    setNetworkConnection: typeof setNetworkConnection;
    setWifiState: typeof setWifiState;
    setDataState: typeof setDataState;
    toggleData: typeof toggleData;
    toggleFlightMode: typeof toggleFlightMode;
    toggleWiFi: typeof toggleWiFi;
    getPerformanceData: typeof getPerformanceData;
    getPerformanceDataTypes: typeof getPerformanceDataTypes;
    mobileGetPerformanceData: typeof mobileGetPerformanceData;
    mobileChangePermissions: typeof mobileChangePermissions;
    mobileGetPermissions: typeof mobileGetPermissions;
    startRecordingScreen: typeof startRecordingScreen;
    stopRecordingScreen: typeof stopRecordingScreen;
    getStrings: typeof getStrings;
    ensureDeviceLocale: typeof ensureDeviceLocale;
    mobileShell: typeof mobileShell;
    mobileNfc: typeof mobileNfc;
    mobileStartScreenStreaming: typeof mobileStartScreenStreaming;
    mobileStopScreenStreaming: typeof mobileStopScreenStreaming;
    getSystemBars: typeof getSystemBars;
    mobilePerformStatusBarCommand: typeof mobilePerformStatusBarCommand;
    getDeviceTime: typeof getDeviceTime;
    mobileGetDeviceTime: typeof mobileGetDeviceTime;
    reset: typeof reset;
    closeApp: typeof closeApp;
    launchApp: typeof launchApp;
}
export { AndroidDriver };
//# sourceMappingURL=driver.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetworkConnection = getNetworkConnection;
exports.isWifiOn = isWifiOn;
exports.mobileSetConnectivity = mobileSetConnectivity;
exports.mobileGetConnectivity = mobileGetConnectivity;
exports.setNetworkConnection = setNetworkConnection;
exports.setWifiState = setWifiState;
exports.setDataState = setDataState;
exports.toggleData = toggleData;
exports.toggleWiFi = toggleWiFi;
exports.toggleFlightMode = toggleFlightMode;
const lodash_1 = __importDefault(require("lodash"));
const driver_1 = require("appium/driver");
const support_1 = require("appium/support");
const bluebird_1 = __importDefault(require("bluebird"));
const AIRPLANE_MODE_MASK = 0b001;
const WIFI_MASK = 0b010;
const DATA_MASK = 0b100;
const WIFI_KEY_NAME = 'wifi';
const DATA_KEY_NAME = 'data';
const AIRPLANE_MODE_KEY_NAME = 'airplaneMode';
const SUPPORTED_SERVICE_NAMES = /** @type {const} */ ([
    WIFI_KEY_NAME,
    DATA_KEY_NAME,
    AIRPLANE_MODE_KEY_NAME,
]);
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<number>}
 */
async function getNetworkConnection() {
    this.log.info('Getting network connection');
    let airplaneModeOn = await this.adb.isAirplaneModeOn();
    let connection = airplaneModeOn ? AIRPLANE_MODE_MASK : 0;
    // no need to check anything else if we are in airplane mode
    if (!airplaneModeOn) {
        let wifiOn = await this.isWifiOn();
        connection |= wifiOn ? WIFI_MASK : 0;
        let dataOn = await this.adb.isDataOn();
        connection |= dataOn ? DATA_MASK : 0;
    }
    return connection;
}
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<boolean>}
 */
async function isWifiOn() {
    return await this.adb.isWifiOn();
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').SetConnectivityOpts} [opts={}]
 * @returns {Promise<void>}
 */
async function mobileSetConnectivity(opts = {}) {
    const { wifi, data, airplaneMode } = opts;
    if (lodash_1.default.every([wifi, data, airplaneMode], lodash_1.default.isUndefined)) {
        throw new driver_1.errors.InvalidArgumentError(`Either one of ${JSON.stringify(SUPPORTED_SERVICE_NAMES)} options must be provided`);
    }
    const currentState = await this.mobileGetConnectivity({
        services: /** @type {import('./types').ServiceType[]} */ ([
            ...(lodash_1.default.isUndefined(wifi) ? [] : [WIFI_KEY_NAME]),
            ...(lodash_1.default.isUndefined(data) ? [] : [DATA_KEY_NAME]),
            ...(lodash_1.default.isUndefined(airplaneMode) ? [] : [AIRPLANE_MODE_KEY_NAME]),
        ]),
    });
    /** @type {(Promise<any>|(() => Promise<any>))[]} */
    const setters = [];
    if (!lodash_1.default.isUndefined(wifi) && currentState.wifi !== Boolean(wifi)) {
        setters.push(this.setWifiState(wifi));
    }
    if (!lodash_1.default.isUndefined(data) && currentState.data !== Boolean(data)) {
        setters.push(this.setDataState(data));
    }
    if (!lodash_1.default.isUndefined(airplaneMode) && currentState.airplaneMode !== Boolean(airplaneMode)) {
        setters.push(async () => {
            await this.adb.setAirplaneMode(airplaneMode);
            if ((await this.adb.getApiLevel()) < 30) {
                await this.adb.broadcastAirplaneMode(airplaneMode);
            }
        });
    }
    if (!lodash_1.default.isEmpty(setters)) {
        await bluebird_1.default.all(setters);
    }
}
/**
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').GetConnectivityOpts} [opts={}]
 * @returns {Promise<import('./types').GetConnectivityResult>}
 */
async function mobileGetConnectivity(opts = {}) {
    let { services = SUPPORTED_SERVICE_NAMES } = opts;
    const svcs = lodash_1.default.castArray(services);
    const unsupportedServices = lodash_1.default.difference(services, SUPPORTED_SERVICE_NAMES);
    if (!lodash_1.default.isEmpty(unsupportedServices)) {
        throw new driver_1.errors.InvalidArgumentError(`${support_1.util.pluralize('Service name', unsupportedServices.length, false)} ${unsupportedServices} ` +
            `${unsupportedServices.length === 1 ? 'is' : 'are'} not known. Only the following services are ` +
            `suported: ${SUPPORTED_SERVICE_NAMES}`);
    }
    const statePromises = {
        wifi: bluebird_1.default.resolve(svcs.includes(WIFI_KEY_NAME) ? this.adb.isWifiOn() : undefined),
        data: bluebird_1.default.resolve(svcs.includes(DATA_KEY_NAME) ? this.adb.isDataOn() : undefined),
        airplaneMode: bluebird_1.default.resolve(svcs.includes(AIRPLANE_MODE_KEY_NAME) ? this.adb.isAirplaneModeOn() : undefined),
    };
    await bluebird_1.default.all(lodash_1.default.values(statePromises));
    return {
        wifi: Boolean(statePromises.wifi.value()),
        data: Boolean(statePromises.data.value()),
        airplaneMode: Boolean(statePromises.airplaneMode.value()),
    };
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {number} type
 * @returns {Promise<number>}
 */
async function setNetworkConnection(type) {
    this.log.info('Setting network connection');
    // decode the input
    const shouldEnableAirplaneMode = (type & AIRPLANE_MODE_MASK) !== 0;
    const shouldEnableWifi = (type & WIFI_MASK) !== 0;
    const shouldEnableDataConnection = (type & DATA_MASK) !== 0;
    const currentState = await this.getNetworkConnection();
    const isAirplaneModeEnabled = (currentState & AIRPLANE_MODE_MASK) !== 0;
    const isWiFiEnabled = (currentState & WIFI_MASK) !== 0;
    const isDataEnabled = (currentState & DATA_MASK) !== 0;
    if (shouldEnableAirplaneMode !== isAirplaneModeEnabled) {
        await this.adb.setAirplaneMode(shouldEnableAirplaneMode);
        if ((await this.adb.getApiLevel()) < 30) {
            await this.adb.broadcastAirplaneMode(shouldEnableAirplaneMode);
        }
    }
    else {
        this.log.info(`Not changing airplane mode, since it is already ${shouldEnableAirplaneMode ? 'enabled' : 'disabled'}`);
    }
    if (shouldEnableWifi === isWiFiEnabled && shouldEnableDataConnection === isDataEnabled) {
        this.log.info('Not changing data connection/Wi-Fi states, since they are already set to expected values');
        if (await this.adb.isAirplaneModeOn()) {
            return AIRPLANE_MODE_MASK | currentState;
        }
        return ~AIRPLANE_MODE_MASK & currentState;
    }
    if (shouldEnableWifi !== isWiFiEnabled) {
        await this.setWifiState(shouldEnableWifi);
    }
    else {
        this.log.info(`Not changing Wi-Fi state, since it is already ` +
            `${shouldEnableWifi ? 'enabled' : 'disabled'}`);
    }
    if (shouldEnableAirplaneMode) {
        this.log.info('Not changing data connection state, because airplane mode is enabled');
    }
    else if (shouldEnableDataConnection === isDataEnabled) {
        this.log.info(`Not changing data connection state, since it is already ` +
            `${shouldEnableDataConnection ? 'enabled' : 'disabled'}`);
    }
    else {
        await this.setDataState(shouldEnableDataConnection);
    }
    return await this.getNetworkConnection();
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} isOn
 * @returns {Promise<void>}
 */
async function setWifiState(isOn) {
    await this.settingsApp.setWifiState(isOn, this.isEmulator());
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @param {boolean} isOn
 * @returns {Promise<void>}
 */
async function setDataState(isOn) {
    await this.settingsApp.setDataState(isOn, this.isEmulator());
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
async function toggleData() {
    const isOn = await this.adb.isDataOn();
    this.log.info(`Turning network data ${!isOn ? 'on' : 'off'}`);
    await this.setDataState(!isOn);
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
async function toggleWiFi() {
    const isOn = await this.adb.isWifiOn();
    this.log.info(`Turning WiFi ${!isOn ? 'on' : 'off'}`);
    await this.setWifiState(!isOn);
}
/**
 * @since Android 12 (only real devices, emulators work in all APIs)
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
async function toggleFlightMode() {
    let flightMode = !(await this.adb.isAirplaneModeOn());
    this.log.info(`Turning flight mode ${flightMode ? 'on' : 'off'}`);
    await this.adb.setAirplaneMode(flightMode);
    if ((await this.adb.getApiLevel()) < 30) {
        await this.adb.broadcastAirplaneMode(flightMode);
    }
}
/**
 * @typedef {import('appium-adb').ADB} ADB
 */
//# sourceMappingURL=network.js.map
/**
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').StartScreenStreamingOpts} [options={}]
 * @returns {Promise<void>}
 */
export function mobileStartScreenStreaming(this: import("../driver").AndroidDriver, options?: import("./types").StartScreenStreamingOpts | undefined): Promise<void>;
export class mobileStartScreenStreaming {
    /**
     * @this {import('../driver').AndroidDriver}
     * @param {import('./types').StartScreenStreamingOpts} [options={}]
     * @returns {Promise<void>}
     */
    constructor(this: import("../driver").AndroidDriver, options?: import("./types").StartScreenStreamingOpts | undefined);
    _screenStreamingProps: {
        deviceStreamingProc: import("child_process").ChildProcessWithoutNullStreams;
        gstreamerPipeline: SubProcess;
        mjpegSocket: net.Socket | undefined;
        mjpegServer: http.Server<typeof http.IncomingMessage, typeof http.ServerResponse> | undefined;
    } | undefined;
}
/**
 * @this {import('../driver').AndroidDriver}
 * @returns {Promise<void>}
 */
export function mobileStopScreenStreaming(this: import("../driver").AndroidDriver): Promise<void>;
export class mobileStopScreenStreaming {
    _screenStreamingProps: any;
}
export type ADB = import("appium-adb").ADB;
export type AppiumLogger = import("@appium/types").AppiumLogger;
export type DeviceInfo = import("./types").DeviceInfo;
import { SubProcess } from 'teen_process';
import net from 'node:net';
import http from 'node:http';
//# sourceMappingURL=streamscreen.d.ts.map
export const androidHomeCheck: EnvVarAndPathCheck;
export const javaHomeCheck: EnvVarAndPathCheck;
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class JavaHomeValueCheck {
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const javaHomeValueCheck: JavaHomeValueCheck;
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class AndroidSdkCheck {
    /** @type {import('@appium/types').AppiumLogger} */
    log: import("@appium/types").AppiumLogger;
    TOOL_NAMES: string[];
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const androidSdkCheck: AndroidSdkCheck;
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class OptionalBundletoolCheck {
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const optionalBundletoolCheck: OptionalBundletoolCheck;
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class OptionalGstreamerCheck {
    GSTREAMER_BINARY: string;
    GST_INSPECT_BINARY: string;
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const optionalGstreamerCheck: OptionalGstreamerCheck;
/** @satisfies {import('@appium/types').IDoctorCheck} */
export class OptionalFfmpegCheck {
    FFMPEG_BINARY: string;
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export const optionalFfmpegCheck: OptionalFfmpegCheck;
export type EnvVarCheckOptions = {
    /**
     * If set to true then
     * the path is expected to be a valid folder
     */
    expectDir?: boolean | undefined;
    /**
     * If set to true then
     * the path is expected to be a valid file
     */
    expectFile?: boolean | undefined;
};
/**
 * @typedef EnvVarCheckOptions
 * @property {boolean} [expectDir] If set to true then
 * the path is expected to be a valid folder
 * @property {boolean} [expectFile] If set to true then
 * the path is expected to be a valid file
 */
/** @satisfies {import('@appium/types').IDoctorCheck} */
declare class EnvVarAndPathCheck {
    /**
     * @param {string} varName
     * @param {EnvVarCheckOptions} [opts={}]
     */
    constructor(varName: string, opts?: EnvVarCheckOptions | undefined);
    varName: string;
    opts: EnvVarCheckOptions;
    diagnose(): Promise<import("@appium/types").DoctorCheckResult>;
    fix(): Promise<string>;
    hasAutofix(): boolean;
    isOptional(): boolean;
}
export {};
//# sourceMappingURL=checks.d.ts.map
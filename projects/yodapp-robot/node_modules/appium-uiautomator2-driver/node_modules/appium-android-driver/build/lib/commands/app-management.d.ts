/**
 * @typedef {Object} IsAppInstalledOptions
 * @property {string} [user] - The user id
 */
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @param {IsAppInstalledOptions} [opts={}]
 * @returns {Promise<boolean>}
 */
export function isAppInstalled(this: import("../driver").AndroidDriver, appId: string, opts?: IsAppInstalledOptions | undefined): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {import('./types').IsAppInstalledOpts} opts
 * @returns {Promise<boolean>}
 */
export function mobileIsAppInstalled(this: import("../driver").AndroidDriver, opts: import("./types").IsAppInstalledOpts): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @returns {Promise<import('./types').AppState>}
 */
export function queryAppState(this: import("../driver").AndroidDriver, appId: string): Promise<import("./types").AppState>;
/**
 * @this {AndroidDriver}
 * @param {import('./types').QueryAppStateOpts} opts
 * @returns {Promise<import('./types').AppState>}
 */
export function mobileQueryAppState(this: import("../driver").AndroidDriver, opts: import("./types").QueryAppStateOpts): Promise<import("./types").AppState>;
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @returns {Promise<void>}
 */
export function activateApp(this: import("../driver").AndroidDriver, appId: string): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {import('./types').ActivateAppOpts} opts
 * @returns {Promise<void>}
 */
export function mobileActivateApp(this: import("../driver").AndroidDriver, opts: import("./types").ActivateAppOpts): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @param {Omit<import('appium-adb').UninstallOptions, 'appId'>} opts
 * @returns {Promise<boolean>}
 */
export function removeApp(this: import("../driver").AndroidDriver, appId: string, opts?: Omit<import("appium-adb").UninstallOptions, "appId">): Promise<boolean>;
/**
 * @this {import('../driver').AndroidDriver}
 * @param {import('./types').RemoveAppOpts} opts
 * @returns {Promise<boolean>}
 */
export function mobileRemoveApp(this: import("../driver").AndroidDriver, opts: import("./types").RemoveAppOpts): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appId
 * @param {Omit<import('./types').TerminateAppOpts, 'appId'>} [options={}]
 * @returns {Promise<boolean>}
 */
export function terminateApp(this: import("../driver").AndroidDriver, appId: string, options?: Omit<import("./types").TerminateAppOpts, "appId"> | undefined): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {import('./types').TerminateAppOpts} opts
 * @returns {Promise<boolean>}
 */
export function mobileTerminateApp(this: import("../driver").AndroidDriver, opts: import("./types").TerminateAppOpts): Promise<boolean>;
/**
 * @this {AndroidDriver}
 * @param {string} appPath
 * @param {Omit<import('appium-adb').InstallOptions, 'appId'>} opts
 * @returns {Promise<void>}
 */
export function installApp(this: import("../driver").AndroidDriver, appPath: string, opts: Omit<import("appium-adb").InstallOptions, "appId">): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {import('./types').InstallAppOpts} opts
 * @returns {Promise<void>}
 */
export function mobileInstallApp(this: import("../driver").AndroidDriver, opts: import("./types").InstallAppOpts): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {import('./types').ClearAppOpts} opts
 * @returns {Promise<void>}
 */
export function mobileClearApp(this: import("../driver").AndroidDriver, opts: import("./types").ClearAppOpts): Promise<void>;
/**
 * @this {AndroidDriver}
 * @returns {Promise<string>}
 */
export function getCurrentActivity(this: import("../driver").AndroidDriver): Promise<string>;
/**
 * @this {AndroidDriver}
 * @returns {Promise<string>}
 */
export function getCurrentPackage(this: import("../driver").AndroidDriver): Promise<string>;
/**
 * @this {AndroidDriver}
 * @param {number} seconds
 * @returns {Promise<string|true>}
 */
export function background(this: import("../driver").AndroidDriver, seconds: number): Promise<string | true>;
/**
 * @this {AndroidDriver}
 * @param {import('../driver').AndroidDriverOpts?} [opts=null]
 * @returns {Promise<void>}
 */
export function resetAUT(this: import("../driver").AndroidDriver, opts?: import("../driver").AndroidDriverOpts | null | undefined): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {import('../driver').AndroidDriverOpts?} [opts=null]
 * @returns {Promise<void>}
 */
export function installAUT(this: import("../driver").AndroidDriver, opts?: import("../driver").AndroidDriverOpts | null | undefined): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string[]} otherApps
 * @param {import('../driver').AndroidDriverOpts?} [opts=null]
 * @returns {Promise<void>}
 */
export function installOtherApks(this: import("../driver").AndroidDriver, otherApps: string[], opts?: import("../driver").AndroidDriverOpts | null | undefined): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string[]} appPackages
 * @param {string[]} [filterPackages=[]]
 * @returns {Promise<void>}
 */
export function uninstallOtherPackages(this: import("../driver").AndroidDriver, appPackages: string[], filterPackages?: string[] | undefined): Promise<void>;
/**
 * @this {AndroidDriver}
 * @param {string[]} [filterPackages=[]]
 * @returns {Promise<string[]>}
 */
export function getThirdPartyPackages(this: import("../driver").AndroidDriver, filterPackages?: string[] | undefined): Promise<string[]>;
export namespace APP_STATE {
    let NOT_INSTALLED: 0;
    let NOT_RUNNING: 1;
    let RUNNING_IN_BACKGROUND: 3;
    let RUNNING_IN_FOREGROUND: 4;
}
export type IsAppInstalledOptions = {
    /**
     * - The user id
     */
    user?: string | undefined;
};
export type AndroidDriver = import("../driver").AndroidDriver;
//# sourceMappingURL=app-management.d.ts.map